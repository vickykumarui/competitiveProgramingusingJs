class Node{
   constructor(val){
       this.value = val;
       this.next = null;
   } 
}

// FIFO all at order of O(1)
class Queue{
      constructor(){
          this.first = null;
          this.last = null;
          this.size = 0;
      }

// dequeue from begining
      dequeue(){
        if(this.size === 0) return null;
        let currNode = this.first;
        if(this.size === 1){
            this.first = null;
            this.last = null;
        } else{
            this.first = this.first.next;
        }

        this.size--
        return currNode.value;
      }

    // enqueue at the end and
      enqueue(val){
          let newNode = new Node(val);
          if(this.size === 0){
              this.first = newNode;
              this.last = newNode;
          } else{
            this.last.next = newNode;
            this.last = newNode;
          }

          this.size++;

          return this.size;
      }
}

